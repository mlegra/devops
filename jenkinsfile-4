import groovy.json.JsonOutput
import groovy.json.JsonSlurper
/*properties([
    parameters([
        string(name: 'countTotal', defaultValue: '3')
    ])
])

def stages = [failFast: true]
for (int i = 0; i < params.countTotal.toInteger(); i++) {
    def scNumber = i //alias the loop variable to refer it in the closure
    stages["deploySC ${scNumber}"] = {
        stage("deployVM ${scNumber}") {
            sh "echo p1; sleep 12s; echo phase${scNumber}"
            build job: 'job-2'
        }
    }
}

node() {
    parallel stages
}
*/


/*pipeline {
    agent any
    stages {
        stage('Processing projects') {
            steps {
                script {
                    def projects = ['project0', 'project1', 'project2', 'project3', 'project4']
                    def projectsBuilds = [:] // essential change here
                    
                    for (project in projects) {
                        //JENKINS-55426 need to save iterated variable value into intermediate variable, otherwise there will be last value from collection for all jobs
                        def currentProject = project
                        def labelParameters = []
                       // labelParameters.add([$class: 'LabelParameterValue', name: 'node', label: 'agent2'])
                        labelParameters.add([$class: "StringParameterValue", name: "PROJECT_NAME", value: currentProject])

                        projectsBuilds[currentProject] = {
                            stage(String.format('%s execution', currentProject)) {
                                //build job: 'job-2'
                              sh 'curl -u michel:michel http://192.168.204.128:8080/job/job-2/build?token=lizy'
                             // sh '$curl --version'
                            }
                        }
                    }

                    print(projectsBuilds)
                    print(env.BUILD_NUMBER)
                    print(env.WORKSPACE)
                    parallel projectsBuilds;
                }
            }
        }
    }
}*/

pipeline {
    agent any
     parameters {
        
        string(name: 'Cant', defaultValue: '3', description: 'Cantidad?')
        
       }
    stages {
        stage('Processing projects') {
            steps {
                script {
                    def projects = ['project0', 'project1', 'project2', 'project3', 'project4']
                    def projectsBuilds = [:] // essential change here
                    
                   // for (project in projects) {
                       for (i=0; i<Cant.toInteger(); i++) {
                        //JENKINS-55426 need to save iterated variable value into intermediate variable, otherwise there will be last value from collection for all jobs
                       // def currentProject = project
                       // def labelParameters = []
                       // labelParameters.add([$class: 'LabelParameterValue', name: 'node', label: 'agent2'])
                       // labelParameters.add([$class: "StringParameterValue", name: "PROJECT_NAME", value: currentProject])

                       // projectsBuilds[currentProject] = {
                              //build job: 'job-2'
                              sh 'curl -u michel:michel http://192.168.204.128:8080/job/job-2/build?token=lizy'
                            
                           // }
                        }
                    }

                   // print(projectsBuilds)
                    print(env.BUILD_NUMBER)
                    print(env.WORKSPACE)
                   // parallel projectsBuilds;
                }
            }
        }
    }


/*pipeline {
    agent any
    parameters {
        
        string(name: 'Cant', defaultValue: '5', description: 'Cantidad?')
        
       }
    stages {
        stage('Processing projects') {
            steps {
                script {
                  for (int i = 0; i < params.Cant.toInteger(); i++) {
                  build job: 'job-2'
        }
    }
}
                }
            }
        }*/

/*pipeline {
    agent any
    parameters {
        
        string(name: 'Cant', defaultValue: '5', description: 'Cantidad?')
        
       }
    stages {
        stage('Processing projects') {
            steps {
                
                 script { 
                     script {
                       def obj = load "task1.groovy"
                        obj.Meth2()
                 }
        
    }
  }
}
}
}  */     
